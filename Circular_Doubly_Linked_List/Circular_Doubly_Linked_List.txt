#include<iostream>
#include<vector>
using namespace std;

class node{
	public:
		int data;
		node *next;
		node *prev;
		node(){
			next = NULL;
			prev = NULL;
		}
};

class LinkedList{
	node *head;
	int count=0;
	public:

		LinkedList(){
			head = NULL;
		}

		~LinkedList()
		{
			for (node *p; head !=0;)
			{
				p = head->next;
				delete head;
				head = p;
			}
		}

		bool empty()
		{
			return (head == NULL);
		}

		void insert_at_beginning(int data)
		{
			if (count==0)
			{
				node *temp = new node();
				temp->data = data;
				temp->next = head;
				head  = temp;
			}
			else if(count ==1)
			{
				node *temp = new node();
				temp->data = data;
				temp->next = head;
				temp->prev = head;
				head->next = temp;
				head->prev = temp;
				head = temp;
			}
			else
			{
				node *ptr,*temp = new node();
				temp->data = data;
				ptr = head->next;
				while (ptr->next != head)
				{
					ptr=ptr->next;
				}
				temp->next = head;
				head->prev = temp;
				ptr->next = temp;
				temp->prev = ptr;
				head = temp;
			}

			count++;
		}

		void insert_at_end(int data)
		{
			if (count==0)
			{
				node *temp = new node();
				temp->data = data;
				temp->next = head;
				head  = temp;
			}
			else if(count ==1)
			{
				node *temp = new node();
				temp->data = data;
				temp->next = head;
				temp->prev = head;
				head->next = temp;
				head->prev = temp;
			}
			else
			{
				node *ptr,*temp = new node();
				temp->data = data;
				ptr = head->prev;
				temp->next = head;
				head->prev = temp;
				ptr->next = temp;
				temp->prev = ptr;
			}

			count++;
		}


		void insert_at_given_position(int data, int x){
			node *temp = new node();
			temp->data = data;
			node *ptr = head;

			while(ptr->data!=x) {
				ptr = ptr->next;
			}
			temp->next = ptr->next;
			temp->prev = ptr;
			ptr->next->prev= temp;
			ptr->next = temp;
			count++;
		}

		void delete_at_beginning(){
			if (empty()){
				cout<<"List is Empty"<<endl;
			}
			else{
				cout<<"Element Deleted: "<<head->data<<endl;
				node *ptr,*temp = head;
				ptr = head->prev;
				head = temp->next;
				ptr->next = head;
				head->prev = ptr;
				delete(temp);
			}
			count--;
		}


		void delete_at_end(){
			if (empty()){
				cout<<"List is Empty"<<endl;
			}
			else{

				node *ptr,*temp = head->prev;
				ptr = temp->prev;
				ptr->next=head;
				head->prev=ptr;
				cout<<"Element Deleted: "<<temp->data<<endl;
				delete(temp);
			}
			count--;
		}

		void delete_element(int p){
			if (empty()){
				cout<<"List is Empty"<<endl;
			}
			else{
				node *pr, *ptr,*post;
				pr = ptr = post = head;
				if (p==head->data)
					this->delete_at_beginning();
				else{
					do{
						pr=ptr;
						ptr = ptr->next;
						post=ptr->next;

					}while(ptr->data!=p);
					cout<<"Element Deleted: "<<ptr->data<<endl;
					pr->next=post;
					post->prev=pr;
					delete(ptr);
				}
			}

		}


		int search(int p,int q=0){
			string s;
			int ret=0;
			if (empty()){
				s="List is Empty.....";
			}
			else if(p==head->data)
			{
				s="match Found at index (Start 0) 0";
				ret= 1;
			}
			else {
				node *temp;
				int pos;
				bool a=false;
				temp=head;
				pos=0;
				do
				{
					if (p==temp->data)
					{
						a=true;
						s="Match found at index: ";
						ret= 1;
						break;
					}
					pos++;
					temp=temp->next;
				}while(temp!=head);
				if (a==false)
				{
					s="Item not found in List....";
				}
				if (q==0)
				{
					cout<<s<<" - "<<pos<<endl;
				}
			}
		return ret;
		}

		void print(){
			if (empty()){
				cout<<"List is empty"<<endl;
			}
			else{
				node *temp = head;
				cout<<"Linked List: <-> ";
				do {
					cout<<temp->data<<" <-> ";
					temp = temp->next;
				}while (temp != head);
				cout<<endl;
			}
		}

};


int main() {

	cout<<("1  Insert at the beginning");
	cout<<("\n2  Insert at any Location");
	cout<<("\n4  Delete from beginning");
	cout<<("\n5  Delete from End");
	cout<<("\n6  Delete element");
	cout<<("\n7  Search Item");
	cout<<("\n8  Display");
	cout<<("\n0  Exit");

	int choice,data,p;
	LinkedList ll;
	LinkedList l2;
	do {
		cout<<"\nEnter Your Choice: ";
		cin>>choice;
		switch (choice)
		{
			case 1:
				cout<<"Enter the Element: ";
				cin>>data;
				ll.insert_at_beginning(data);
				break;


			case 2:
				cout<<"Enter the Element: ";
				cin>>data;
				ll.insert_at_end(data);
				break;

			case 3:
				cout<<"Enter the value of element X : ";
				cin>>p;
				cout<<"Enter the Element : ";
				cin>>data;
				if(ll.search(p,1)==0)
					cout<<"X not in List";
				else
				{
					ll.insert_at_given_position(data,p);
					cout<<"Element is Inserted Successfully...";
				}
				break;


			case 4:
				ll.delete_at_beginning();
				break;



			case 5:
				ll.delete_at_end();
				break;

			case 6:
				cout<<"Enter the Element: ";
				cin>>p;
				ll.delete_element(p);
				break;

			case 7:
				cout<<"Enter the Element you want to search: ";
				cin>>p;
				ll.search(p);
				break;

			case 8:
				ll.print();
				break;


		}
	} while (choice != 0);

}
